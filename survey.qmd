---
server: shiny
filters: [surveydown]
---

```{r}
#| context: setup
#| echo: false
#| warning: false
#| message: false

################
# Installation #
################

# Run this in your R Console to install the latest version of the package:
# remotes::install_github("surveydown-dev/surveydown", force = TRUE)

# Run this to install or update the Quarto extension to the latest version:
# surveydown::sd_update_extension()

#################
# Load packages #
#################

# Load the package
library(surveydown)

# Run initial setup function (essential - do not delete)
sd_setup()

##################
# Database setup #
##################

# surveydown stores data on a database that you define at https://supabase.com/
# To connect to a database, update the sd_database() function with details
# from your supabase database. For this demo, we set ignore = TRUE, which will
# ignore the settings and won't attempt to connect to the database. This is
# helpful for local testing if you don't want to record testing data in the
# database table. See the documentation for details:
# https://surveydown.org/store-data

db <- sd_database(
  host   = "",
  dbname = "",
  port   = "",
  user   = "",
  table  = "",
  ignore = TRUE
)
```

::: {#welcome .sd-page}

# Demo survey of question types

> This is a demo survey showcasing the functionality of <a href="https://surveydown.org" target="_blank">surveydown</a>. It doesn't collect any data.
>
> The GitHub repo of this demo can be accessed <a href="https://github.com/surveydown-dev/demo-question-types" target="_blank">here</a>.

Here is a question to get started.

This question showcases what a "multiple choice" question looks like, which is created using `type = 'mc'` inside the `sd_question()` function.

It also is an example of the `show_if` feature (conditional display). If you choose the "Other" option, a second question pops up below asking to specify which other type of penguin is your favorite. This is controlled with the `show_if` argument to the `sd_config()` function defined in the server section at the bottom of the .qmd file.

```{r}
sd_question(
  type  = 'mc',
  id    = 'penguins',
  label = "Which is your favorite type of penguin?",
  option = c(
    'Adélie'    = 'adelie',
    'Chinstrap' = 'chinstrap',
    'Gentoo'    = 'gentoo',
    'Other'     = 'other'
  )
)

sd_question(
  type  = "text",
  id    = "penguins_other",
  label = "Please specify the other penguin type:"
)
```

<br>

```{r}
sd_next(next_page = 'skipif')
```

:::

::: {#skipif .sd-page}

# skipif

This page showcases the `skip_if` feature, which allows you to skip forward in the survey based on different conditions. Depending on your choice, you'll go to a different page in the survey when you press the "Next" button. This is controlled with the `skip_if` argument to the `sd_config()` function defined in the server section at the bottom of the .qmd file.

```{r}
sd_question(
  type  = 'mc',
  id    = 'skip_to_page',
  label = "Where do you want to skip to?",
  option = c(
    'Take me to the page on Question Types (the next page)' = 'question_types',
    'Take me to the page on Question Formatting' = 'question_formatting',
    'Skip to the end' = 'end'
  )
)
```

<br>

```{r}
sd_next(next_page = 'questionTypes')
```

:::

::: {#questionTypes .sd-page}

# Question types

This page showcases the different types of question supported by `{surveydown}`. Each question requires the user to define the following arguments to the `sd_question()` function:


- `id`: A unique identifier for the question, which will be used as the variable name in the resulting survey data.
- `label`: The label that will be displayed on the question in the survey.
- `type`: The type of question, options include:
    - `text`: Single line open text input.
    - `textarea`: Multiple line open text input.
    - `numeric`: Single line numeric text input.
    - `mc`: Multiple choice with a single select option (radio buttons).
    - `mc_buttons`: Same as `mc` but as a "button" style instead of radio buttons.
    - `mc_multiple`: Multiple choice with mutliple select options (check boxes).
    - `mc_multiple_buttons`: Same as `mc_multiple` but as a "button" style instead of check boxes.
    - `select`: Select a choice from a dropdown menu.
    - `slider`: Slider to select discrete categories or continuous numbers.
    - `date`: Select a date from a calendar widget.
    - `daterange`: Select two dates from calendar widgets (e.g. begin and end dates).

#### Use `type = 'text'` to specify a text input type question:

```{r}
sd_question(
  type  = "text",
  id    = "silly_word",
  label = "Write a silly word:"
)
```

#### Use `type = 'textarea'` to specify a textarea input type question:

```{r}
sd_question(
  type  = "textarea",
  id    = "silly_paragraph",
  label = "Write a silly paragraph:"
)
```

#### Use `type = 'numeric'` to specify a numeric input type:

```{r}
sd_question(
  type  = 'numeric',
  id    = 'age',
  label = "What's your age?"
)
```

#### Use `type = 'mc'` to specify a multiple choice type question with a single choice option:

```{r}
sd_question(
  type   = 'mc',
  id     = 'artist',
  label  = "Which artist do you prefer most from this list?",
  option = c(
    "Taylor Swift" = "taylor_swift",
    "Beyoncé"      = "beyonce",
    "Adele"        = "adele",
    "Rihanna"      = "rihanna",
    "Lady Gaga"    = "ladygaga",
    "Ed Sheeran"   = "ed_sheeran",
    "Drake"        = "drake"
  )
)
```

#### Use `type = 'mc_buttons'` to generate the button version of `mc`:

```{r}
sd_question(
  type   = 'mc_buttons',
  id     = 'fruit',
  label  = "Which fruit do you prefer most from this list?",
  option = c(
    "Apple"      = "apple",
    "Banana"     = "banana",
    "Pear"       = "pear",
    "Strawberry" = "strawberry",
    "Grape"      = "grape",
    "Mango"      = "mango",
    "Watermelon" = "watermelon"
  )
)
```

#### Use `type = 'mc_multiple'` to specify a multiple choice type question with multiple selection enabled:

```{r}
sd_question(
  type  = 'mc_multiple',
  id    = 'swift',
  label = "What are your favorite Taylor Swift albums (select all that apply)?",
  option = c(
    "Taylor Swift (2006)" = "taylor_swift",
    "Fearless (2008)"     = "fearless",
    "Speak Now (2010)"    = "speak_now",
    "Red (2012)"          = "red",
    "1989 (2014)"         = "1989",
    "Reputation (2017)"   = "reputation",
    "Lover (2019)"        = "lover",
    "Folklore (2020)"     = "folklore",
    "Evermore (2020)"     = "evermore",
    "Midnights (2022)"    = "midnights"
  )
)
```

#### Use `type = 'mc_multiple_buttons'` to generate the button version of `mc_multiple`:

```{r}
sd_question(
  type  = 'mc_multiple_buttons',
  id    = 'michael_jackson',
  label = "Which are your favorite Michael Jackson songs (select all that apply)?",
  option = c(
    "Thriller (1982)"          = "thriller",
    "Billie Jean (1982)"       = "billie_jean",
    "Beat It (1982)"           = "beat_it",
    "Man in the Mirror (1987)" = "man_in_the_mirror",
    "Smooth Criminal (1987)"   = "smooth_criminal",
    "Black or White (1991)"    = "black_or_white",
    "Bad (1987)"               = "bad",
    "Human Nature (1982)"      = "human_nature"
  )
)
```

#### Use `type = 'select'` to specify a drop down select type question:

```{r}
sd_question(
  type  = 'select',
  id    = 'education',
  label = "What is the highest level of education you have attained?",
  option = c(
    "Did not attend high school" = "hs_no",
    "Some high school"           = "hs_some",
    "High school graduate"       = "hs_grad",
    "Some college"               = "college_some",
    "College"                    = "college_grad",
    "Graduate Work"              = "grad",
    "Prefer not to say"          = "no_response"
  )
)
```

#### Use `type = 'slider'` to specify a slider input type:

```{r}
sd_question(
  type  = 'slider',
  id    = 'climate_care',
  label = "To what extent do you believe human-caused climate change is real?",
  option = c(
    "Don't Believe"    = "dont_believe",
    "Somewhat Believe" = "somewhat",
    "Neutral"          = "neutral",
    "Believe"          = "believe",
    "Strongly Believe" = "strongly_believe"
  )
)
```

#### `type = 'slider'` can also be used to select a range:

```{r}
sd_question(
  type     = 'slider',
  id       = 'coldest_months',
  label    = "What months do you think are the coldest throughout a year?",
  option   = month.abb,
  selected = month.abb[c(4, 8)]
)
```

#### Use `type = 'date'` to specify a date input type:

```{r}
sd_question(
  type  = 'date',
  id    = 'dob',
  label = "What is your date of birth?"
)
```

#### Use `type = 'daterange'` to specify a daterange input type:

```{r}
sd_question(
  type  = 'daterange',
  id    = 'hs_date',
  label = "When did you start and finish high school?"
)
```

<br>

```{r}
sd_next(next_page = 'questionFormatting')
```

:::

::: {#questionFormatting .sd-page}

# Question formatting

> On this page, we'll demonstrate some of the formatting options for displaying questions.

#### Markdown is supported for the question label

The `label` argument for any question type can accept markdown formatting. For example, the question below uses the `**` symbols to make some works bold:

```{r}
sd_question(
  type   = 'mc',
  id     = 'markdown_label',
  label  = "**This** is a question *label* supporting ***markdown***:",
  option = c(
    "Option A" = "option_a",
    "Option B" = "option_b",
    "Option C" = "option_c"
  )
)
```

#### Markdown is supported for options in `mc_buttons` questions

For `mc_button` type questions, you can also use markdown to format the `option` labels:

```{r}
sd_question(
  type   = 'mc_buttons',
  id     = 'markdown_buttons',
  label  = "The 3 options below support markdown:",
  option = c(
    "*Option A*"     = "option_a",
    "**Option B**"   = "option_b",
    "***Option C***" = "option_c"
  )
)
```

The same is true for `mc_multiple_buttons`:

```{r}
sd_question(
  type   = 'mc_multiple_buttons',
  id     = 'markdown_multiple_buttons',
  label  = "The 3 options below support markdown:",
  option = c(
    "*Option A*"     = "option_a",
    "**Option B**"   = "option_b",
    "***Option C***" = "option_c"
  )
)
```

#### HTML is also supported for options of `mc_buttons` and `mc_multiple_buttons`, so that you can insert mixed content including plain text, markdown, and HTML images. For example, here is a question with some complex labels for a choice question:

```{r}
# Define the option vector
html_buttons_option <- c("option_1", "option_2", "option_3")

# Change the names of each element to display markdown-formatted text 
# and an embedded image using html
names(html_buttons_option)[1] <- "**Option 1**<br>
    <img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/fuji.jpg' width=100><br>
    **Type**: Fuji<br>
    **Price**: $ 2 / lb<br>
    **Freshness**: Average"
names(html_buttons_option)[2] <- "**Option 2**<br>
    <img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/pinkLady.jpg' width=100><br>
    **Type**: Pink Lady<br>
    **Price**: $ 1.5 / lb<br>
    **Freshness**: Excellent"
names(html_buttons_option)[3] <- "**Option 3**<br>
    <img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/honeycrisp.jpg' width=100><br>
    **Type**: Honeycrisp<br>
    **Price**: $ 2 / lb<br>
    **Freshness**: Poor"

sd_question(
  type   = 'mc_buttons',
  id     = 'html_buttons',
  label  = "A sample survey question using `mc_buttons`",
  option = html_buttons_option
)
```

#### Use the `width` argument to change the width for the question:

```{r}
sd_question(
  type  = "textarea",
  id    = "change_width",
  label = "This text area has width set as 40%:",
  width = "40%"
)
```

<br>

```{r}
sd_next(next_page = 'end')
```

:::

::: {#end .sd-page}

## Thanks for taking our survey!

:::

```{r}
#| context: server

################
# config setup #
################

# Use the sd_config() function to customize features in your survey, like
# logic to conditionally display questions or skip to pages based on responses
# to skip other questions in your survey. See documentation for details at
# https://surveydown.org/config

config <- sd_config(
  skip_if = tibble::tribble(
    ~question_id,   ~question_value,        ~target,
    "skip_to_page", "end",                  "end",
    "skip_to_page", "question_formatting",  "questionFormatting"
  ),
  show_if = tibble::tribble(
    ~question_id,  ~question_value, ~target,
    "penguins",    "other",         "penguins_other"
  ),
  # required_questions = c("penguins", "penguins_other", "skip_to_page")
  all_questions_required = FALSE # Turn on to make all questions required
)

####################################
# Don't change anything below here #
####################################

# The sd_server function initiates your survey - don't change this

sd_server(
  input   = input,
  output  = output,
  session = session,
  config  = config,
  db      = db
)
```
